// Mocks generated by Mockito 5.0.17 from annotations
// in music_player/test/music_list_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:music_player/core/network/error/network_error.dart' as _i7;
import 'package:music_player/core/network/network_interface.dart' as _i2;
import 'package:music_player/core/network/network_model.dart' as _i6;
import 'package:music_player/services/music_list/service.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNetworkInterface_0 extends _i1.Fake implements _i2.NetworkInterface {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [MusicListService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicListService extends _i1.Mock implements _i4.MusicListService {
  MockMusicListService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkInterface get network =>
      (super.noSuchMethod(Invocation.getter(#network),
          returnValue: _FakeNetworkInterface_0()) as _i2.NetworkInterface);
  @override
  _i5.Future<_i3.Either<_i6.NetworkModel, _i7.NetworkError>> searchByArtist(
          String? artist) =>
      (super.noSuchMethod(Invocation.method(#searchByArtist, [artist]),
              returnValue:
                  Future<_i3.Either<_i6.NetworkModel, _i7.NetworkError>>.value(
                      _FakeEither_1<_i6.NetworkModel, _i7.NetworkError>()))
          as _i5.Future<_i3.Either<_i6.NetworkModel, _i7.NetworkError>>);
}
